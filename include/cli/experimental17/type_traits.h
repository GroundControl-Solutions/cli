/*******************************************************************************
 * Copyright (C) 2019 GroundControl Solutions
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_EXPERIMENTAL17_TYPE_TRAITS_H
#define CLI_EXPERIMENTAL17_TYPE_TRAITS_H

#include <type_traits>

namespace cli
{
namespace experimental
{
	template<class...>
	using void_t = void;

	template<typename B1_, typename B2_>
	struct or_ : public std::conditional<B1_::value, B1_, B2_>::type
	{};

	// __is_invocable (std::is_invocable for C++11)

	template<typename Result_, typename Ret_, typename = void>
	struct is_invocable_impl_ : std::false_type
	{};

	template<typename Result_, typename Ret_>
	struct is_invocable_impl_<Result_, Ret_, void_t<typename Result_::type>>
			: or_<std::is_void<Ret_>, std::is_convertible<typename Result_::type, Ret_>>::type
	{};


/// std::is_invocable
	template<typename Fn_, typename... ArgTypes_>
	struct is_invocable : is_invocable_impl_<std::result_of<Fn_(ArgTypes_...)>, void>::type
	{};

/// std::is_invocable_r
	template<typename Ret_, typename Fn_, typename... ArgTypes_>
	struct is_invocable_r
			: is_invocable_impl_<std::result_of<Fn_(ArgTypes_...)>, Ret_>::type
	{};
}
}

#endif
