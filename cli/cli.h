/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

#ifndef CLI_H_
#define CLI_H_

#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <functional>
#include <tuple>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>
#include "colorprofile.h"
#include "history.h"

#include <GCMath/tuple.h>

namespace cli
{

    // ********************************************************************

    template < typename T > struct TypeDesc {};
    template <> struct TypeDesc< char > { static const char* Name() { return "<char>"; } };
    template <> struct TypeDesc< unsigned char > { static const char* Name() { return "<unsigned char>"; } };
    template <> struct TypeDesc< short > { static const char* Name() { return "<short>"; } };
    template <> struct TypeDesc< unsigned short > { static const char* Name() { return "<unsigned short>"; } };
    template <> struct TypeDesc< int > { static const char* Name() { return "<int>"; } };
    template <> struct TypeDesc< unsigned int > { static const char* Name() { return "<unsigned int>"; } };
    template <> struct TypeDesc< long > { static const char* Name() { return "<long>"; } };
    template <> struct TypeDesc< unsigned long > { static const char* Name() { return "<unsigned long>"; } };
    template <> struct TypeDesc< float > { static const char* Name() { return "<float>"; } };
    template <> struct TypeDesc< double > { static const char* Name() { return "<double>"; } };
    template <> struct TypeDesc< long double > { static const char* Name() { return "<long double>"; } };
    template <> struct TypeDesc< bool > { static const char* Name() { return "<bool>"; } };
    template <> struct TypeDesc< std::string > { static const char* Name() { return "<string>"; } };

    // ********************************************************************

    // forward declarations
    class Menu;
    class CliSession;


    class Cli
    {

        // inner class to provide a global output stream
        class OutStream
        {
        public:
            template <typename T>
            OutStream& operator << (const T& msg)
            {
                for (auto out: ostreams)
                    *out << msg;
                return *this;
            }

            // this is the type of std::cout
            typedef std::basic_ostream<char, std::char_traits<char> > CoutType;
            // this is the function signature of std::endl
            typedef CoutType& (*StandardEndLine)(CoutType&);

            // takes << std::endl
            OutStream& operator << (StandardEndLine manip)
            {
                for (auto out: ostreams)
                    manip(*out);
                return *this;
            }

        private:
            friend class Cli;

            void Register(std::ostream& o)
            {
                ostreams.push_back(&o);
            }
            void UnRegister(std::ostream& o)
            {
                ostreams.erase(std::remove(ostreams.begin(), ostreams.end(), &o), ostreams.end());
            }

            std::vector<std::ostream*> ostreams;
        };
        // end inner class

    public:
        Cli(
            std::unique_ptr< Menu >&& _rootMenu,
            std::function< void( std::ostream& )> _exitAction = std::function< void(std::ostream&) >()
        ) :
            rootMenu( std::move(_rootMenu) ),
            exitAction( _exitAction )
        {
        }


        // disable value semantics
        Cli( const Cli& ) = delete;
        Cli& operator = ( const Cli& ) = delete;

        Menu* RootMenu() { return rootMenu.get(); }
        void ExitAction( std::function< void(std::ostream&)> action ) { exitAction = action; }
        void ExitAction( std::ostream& out ) { if ( exitAction ) exitAction( out ); }

        static void Register(std::ostream& o) { cout().Register(o); }
        static void UnRegister(std::ostream& o) { cout().UnRegister(o); }

        static OutStream& cout() { static OutStream s; return s; }

    private:
        std::unique_ptr< Menu > rootMenu; // just to keep it alive
        std::function< void(std::ostream&) > exitAction;
    };

    // ********************************************************************

    class Command
    {
    public:
        explicit Command(const std::string& _name) : name(_name) {}
        virtual ~Command() = default;
        virtual bool Exec( const std::vector< std::string >& cmdLine, CliSession& session ) = 0;
        virtual void Help( std::ostream& out ) const = 0;
        // Returns the collection of completions relatives to this command.
        // For simple commands, provides a base implementation that use the name of the command
        // for aggregate commands (i.e., Menu), the function is redefined to give the menu command
        // and the subcommand recursively
        virtual std::vector<std::string> GetCompletionRecursive(const std::string& line) const
        {
            if ( boost::algorithm::starts_with(name, line) ) return {name};
            else return {};
        }
    protected:
        const std::string& Name() const { return name; }
    private:
        const std::string name;
    };

    // ********************************************************************

    // free utility function to get completions from a list of commands and the current line
    inline std::vector<std::string> GetCompletions(const std::vector< std::unique_ptr< Command > >& cmds, const std::string& currentLine)
    {
        std::vector<std::string> result;
        std::for_each( cmds.begin(), cmds.end(),
            [&currentLine,&result](auto& cmd)
            {
                auto c = cmd->GetCompletionRecursive(currentLine);
                result.insert(result.end(), std::make_move_iterator(c.begin()), std::make_move_iterator(c.end()));
            }
        );
        return result;
    }

    // ********************************************************************

    class CliSession
    {
    public:
        CliSession( Cli& _cli, std::ostream& _out, std::size_t historySize = 100 );
        ~CliSession() { cli.UnRegister(out); }

        // disable value semantics
        CliSession( const CliSession& ) = delete;
        CliSession& operator = ( const CliSession& ) = delete;

        void Feed( const std::string& cmd );

        void Prompt();

        void Current( Menu* menu )
        {
            current = menu;
        }

        std::ostream& OutStream() { return out; }

        void Help() const;

        void Exit()
        {
            if (exitAction) exitAction(out);
            cli.ExitAction(out);
        }

        void ExitAction( std::function< void(std::ostream&)> action )
        {
            exitAction = action;
        }

        void ShowHistory() const { history.Show(out); }

        std::string PreviousCmd(const std::string& line)
        {
            return history.Previous(line);
        }

        std::string NextCmd()
        {
            return history.Next();
        }

        std::vector<std::string> GetCompletions(const std::string& currentLine) const;

    private:

        Cli& cli;
        Menu* current;
        std::unique_ptr< Menu > globalScopeMenu;
        std::ostream& out;
        std::function< void(std::ostream&)> exitAction;
        detail::History history;
    };

    // ********************************************************************

    class Menu : public Command
    {
    public:
        // disable value semantics
        Menu( const Menu& ) = delete;
        Menu& operator = ( const Menu& ) = delete;

        Menu() : Command( {} ), parent( nullptr ), description() {}

        Menu( const std::string& _name, const std::string& desc = "(menu)" ) :
            Command( _name ), parent( nullptr ), description( desc )
        {}

        template < typename F >
        void Add( const std::string& name, F f, const std::string& help = "" )
        {
            // dispatch to private Add methods
            Add( name, help, f, &F::operator() );
        }

        void Add( std::unique_ptr< Command >&& cmd )
        {
            cmds.push_back( std::move(cmd) );
        }

        void Add( std::unique_ptr< Menu >&& menu )
        {
            menu -> parent = this;
            cmds.push_back( std::move(menu) );
        }

        bool Exec( const std::vector< std::string >& cmdLine, CliSession& session ) override
        {
            if ( cmdLine[ 0 ] == Name() )
            {
                if ( cmdLine.size() == 1 )
                {
                    session.Current( this );
                    return true;
                }
                else
                {
                    // check also for subcommands
                    std::vector<std::string > subCmdLine( cmdLine.begin()+1, cmdLine.end() );
                    for ( auto& cmd: cmds )
                        if ( cmd -> Exec( subCmdLine, session ) ) return true;
                }
            }
            return false;
        }

        bool ScanCmds( const std::vector< std::string >& cmdLine, CliSession& session )
        {
            for ( auto& cmd: cmds )
                if ( cmd -> Exec( cmdLine, session ) ) return true;
            if ( parent && parent -> Exec( cmdLine, session ) ) return true;
            return false;
        }

        std::string Prompt() const
        {
            return Name();
        }

        void MainHelp( std::ostream& out )
        {
            for ( auto& cmd: cmds )
                cmd -> Help( out );
            if ( parent ) parent -> Help( out );
        }

        void Help( std::ostream& out ) const override
        {
            out << " - " << Name() << "\n\t" << description << "\n";
        }

        std::vector<std::string> GetCompletions(const std::string& currentLine) const
        {
            auto result = cli::GetCompletions(cmds, currentLine);
			if (parent)
			{
				auto c = parent->GetCompletionRecursive(currentLine);
				result.insert( result.end(), std::make_move_iterator(c.begin()), std::make_move_iterator(c.end()));
			}
			return result;
        }

        virtual std::vector<std::string> GetCompletionRecursive(const std::string& line) const override
        {
            if ( boost::algorithm::starts_with( line, Name() ) )
            {
                auto rest = line;
                rest.erase( 0, Name().size() );
                boost::algorithm::trim_left(rest);
                std::vector<std::string> result;
                for ( auto& cmd: cmds )
                {
                    auto cs = cmd->GetCompletionRecursive( rest );
                    for ( auto& c: cs )
                        result.push_back( Name() + ' ' + c );
                }
                return result;
            }
            return Command::GetCompletionRecursive(line);
        }

    private:

        template < typename F, typename R, typename ...As >
        void Add( const std::string& name, const std::string& help, F& f,R (F::*mf)(std::ostream& out, As...) const );

        Menu* parent;
        const std::string description;
        using Cmds = std::vector< std::unique_ptr< Command > >;
        Cmds cmds;
    };

    // ********************************************************************

	template<size_t... S>
	auto tie(const vector<string>& vec, index_sequence<S...>)
	{
		return std::tie(vec.at(S)...);
	}

	template<class... Args1, class... Args2>
	auto make_param_tuple_(std::tuple<Args1...>*, Args2&&... args2)
	{
		return std::tuple<Args1...>{boost::lexical_cast<Args1>(args2)...};
	}

	template<class... Args>
	auto make_param_tuple(const std::vector<string>& vec)
	{
		auto strs = tie(vec, std::make_index_sequence<sizeof...(Args)>());
		return GC::apply([&](auto&&... args){
			return make_param_tuple_(static_cast<std::tuple<Args...>*>(nullptr), args...);
		}, strs);
	}

	template <size_t I>
	struct visit_impl
	{
		template <typename T>
		static void visit(T& tup, size_t idx, std::ostream & out)
		{
			if (idx == I - 1) out << " " << TypeDesc<decltype(std::get<I - 1>(tup))>::Name();
			else visit_impl<I - 1>::visit(tup, idx, out);
		}
	};

	template <>
	struct visit_impl<0>
	{
		template <typename T>
		static void visit(T&, size_t, std::ostream &) { assert(false); }
	};

	template <typename... Ts>
	void visit_at(std::tuple<Ts...> const& tup, size_t idx, std::ostream & out)
	{
		visit_impl<sizeof...(Ts)>::visit(tup, idx, out);
	}

	template <typename... Ts>
	void visit_at(std::tuple<Ts...>& tup, size_t idx, std::ostream & out)
	{
		visit_impl<sizeof...(Ts)>::visit(tup, idx, out);
	}

	template <typename ...Ts>
	void describe(std::ostream & out)
	{
		for (size_t i = 0; i < sizeof...(Ts); ++i) {
			visit_at(std::tuple<Ts...>{}, i, out);
		}
	}

    template < typename ...Ts >
    class FuncCmd : public Command
    {
    public:
        // disable value semantics
        FuncCmd( const FuncCmd& ) = delete;
        FuncCmd& operator = ( const FuncCmd& ) = delete;

        FuncCmd(
            const std::string& _name,
            std::function< void( std::ostream&, Ts... ) > _function,
            const std::string& desc = ""
            ) : Command( _name ), function( _function ), description( desc )
        {
        }
        bool Exec( const std::vector< std::string >& cmdLine, CliSession& session ) override
        {
            if ( cmdLine.size() != sizeof...(Ts) + 1 ) return false;
            if ( Name() == cmdLine[ 0 ] )
            {
                try
                {
					auto b = cmdLine.begin();
					auto args = std::tuple_cat(std::tuple<std::ostream&>(session.OutStream()), make_param_tuple<Ts...>({++b, cmdLine.end()}));
					GC::apply(function, std::move(args));
                }
                catch ( boost::bad_lexical_cast & )
                {
                    return false;
                }
                return true;
            }

            return false;
        }
        void Help( std::ostream& out ) const override
        {
			out << " - " << Name() << std::endl;
			describe<Ts...>(out);
			if (!description.empty()) {
				out << "\t" << description << std::endl;
			}
        }
    private:
        const std::function< void( std::ostream&, Ts... )> function;
        const std::string description;
    };

    // ********************************************************************

    // CliSession implementation

    inline CliSession::CliSession(Cli& _cli, std::ostream& _out, std::size_t historySize) :
            cli(_cli),
            current(cli.RootMenu()),
            globalScopeMenu(std::make_unique< Menu >()),
            out(_out),
            history(historySize)
        {
            cli.Register(out);
            globalScopeMenu->Add(
                "help",
                [this](std::ostream&){ Help(); },
                "This help message"
            );
            globalScopeMenu->Add(
                "exit",
                [this](std::ostream&){ Exit(); },
                "Quit the session"
            );
#ifdef CLI_HISTORY_CMD
            globalScopeMenu->Add(
                "history",
                [this](std::ostream&){ ShowHistory(); },
                "Show the history"
            );
#endif
        }

    inline void CliSession::Feed( const std::string& cmd )
    {
        std::vector< std::string > strs;
        boost::split( strs, cmd, boost::is_any_of( " \t\n" ), boost::token_compress_on );
        // remove null entries from the vector:
        strs.erase(
            std::remove_if(
                strs.begin(),
                strs.end(),
                [](const std::string& s){ return s.empty(); }
            ),
            strs.end()
        );
        if ( strs.empty() ) return; // just hit enter

        // global cmds check
        bool found = globalScopeMenu->ScanCmds(strs, *this);

        // root menu recursive cmds check
        if ( !found ) found = current -> ScanCmds( std::move(strs), *this ); // last use of strs

        history.NewCommand( cmd ); // add anyway to history
        if ( !found ) // error msg if not found
            out << "Command unknown: " << cmd << "\n";

        return;
    }

    inline void CliSession::Prompt()
    {
        out << beforePrompt
            << current -> Prompt()
            << afterPrompt
            << "> "
            << std::flush;
    }

    inline void CliSession::Help() const
    {
        out << "Commands available:\n";
        globalScopeMenu->MainHelp(out);
        current -> MainHelp( out );
    }

    inline std::vector<std::string> CliSession::GetCompletions( const std::string& currentLine ) const
    {
        auto v1 = globalScopeMenu->GetCompletions(currentLine);
        auto v3 = current -> GetCompletions(currentLine);
        v1.insert( v1.end(), std::make_move_iterator(v3.begin()), std::make_move_iterator(v3.end()) );
        return v1;
    }

    // Menu implementation

    template < typename F, typename R, typename ...As >
    void Menu::Add( const std::string& name, const std::string& help, F& f,R (F::*)(std::ostream& out, As...) const )
    {
        cmds.push_back( std::make_unique< FuncCmd< As... > >( name, f, help ) );
    }

} // namespace

#endif
